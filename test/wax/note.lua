--| # wax.notes
--| Module for extraction of markdown annotations from Lua single line comments.
--| The annotations are extracted from the Lua code and converted to Markdown.
--| Due to the simplicity of Markdown you can have a simple document convertible
--| in many other formats as books, html etc.
--|
--| All you need to do meaningful annotations on your Lua code is the Lua single
--| line comment and 4 symbols: `|`, `$`, `{` `}` followed of a linebreak or
--| blank space.
--|
--| * Lines started with `--| ` contains Markdown at right. Just it.
--| * Every line between a line started with `--{` and a line started with `--}`
--| are copied into the Markdown as Lua code. Use it to document examples while
--| you leave the dirty dishes out of documentation.
--| * Lines started with `--$ ` contains code signatures that are used to build
--| quick reference or make document index to functions classes etc.


--$ wax.note.self( [ctx: number] ) : string
--| Extracts the annotations from the Lua file where it is called. You can use it
--| to extract from parent files specifing a number as the `ctx`


--$ wax.note.compile( [path: string] ) : string -- TODO
--| Finds for every .md and .lua files under the `path` (current path by default)
--| and compile them into a single string.


--$ wax.note.parse( [path: string] ) : string
--| Parse `path` as single file assuming it is a Lua file.


--| ## Compiling example
--|
--| ```
--| --| # This is a Lua module
--| --| Write here a simple description on your module
--| --| that can spans for multiple lines!
--|
--| local mycalc = {}
--|
--| --$ mycalc.sum(a: number, b: number) : number
--| --| A simple sum function
--| function module.sum(a,b)
--|   return a+b
--| end
--|
--| --$ mycalc.fiboseq(amount: number) : table { number }
--| --| Get a list containing the specified `amount` of Fibonacci numbers.
--| function module.fiboseq(amount)
--|   local res = {0,1}
--|   for i=2, amount, 1 do
--|     res[#res+1] = res[#res] + res[#res-1]
--|   end
--|   return res
--| end
--|
--| --| ## Examples
--| do
--| --{
--| local numbers = module.fiboseq(10)
--| print(numbers[10]) -- equal 34
--| --}
--| end
--| ```
--|
--| Will become the following markdown code:
--|
--|     # This is a Lua module
--|     Write here a simple description on your module
--|     that can spans for multiple lines!
--|
--|     ###### `mycalc.sum(a: number, b: number) : number`
--|
--|     A simple sum function
--|
--|     ###### `mycalc.fiboseq(amount: number) : table { number }`
--|
--|     Get a list containing the specified `amount` of Fibonacci numbers.
--|
--|     ## Examples
--|
--|     ```lua
--|     local numbers = module.fiboseq(10)
--|     print(numbers[10]) -- equal 34
--|     ```
--|
--| Or filtering for references will have just the signatures
--|
--|     mycalc.sum(a: number, b: number) : number
--|     mycalc.fiboseq(amount: number) : table { number }
